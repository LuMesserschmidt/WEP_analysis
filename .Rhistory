setnames(c("eurostat_activity_rate_2019", "region"))
geodict <- read_delim("data/EUROSTAT_NUTS2_controls/geo.dic", "\t", col_names = c("code", "region"))
activity_rates <- get_eurostat("lfst_r_lfp2actrtn", time_format = "num") %>%
filter(reg(geo)) %>%
filter(time == max(time)) %>%
left_join(geodict, by=c("geo" = "code")) %>%
filter(citizen == "EU27_2020_FOR" & isced11 == "TOTAL" & age == "Y15-64" & sex == "T") %>%
select(values, region) %>%
setnames(c("eurostat_activity_rate_2019", "region"))
# Cases Merge
# By Anelia Petrova and Luca Messerschmidt
# August 19 2020
rm(list=ls())
library(plyr)
library(tidyverse)
library(data.table)
library(plotly)
library(reshape2)
library(eurostat)
require(gridExtra)
library(lubridate)
coronanet <- read_csv("https://raw.githubusercontent.com/LuMesserschmidt/WEP_analysis/master/data/CoronaNet/coronanet_internal.csv") %>%
filter(country %in% c("France", "Germany", "Italy", "Switzerland"))
#Load merged Data
italy <- read_csv("data/Cases/Italy/italy_dashboard/data_regions.csv")
france <- read_csv("data/Cases/France/france_subnational.csv")
germany <- read_csv("https://raw.githubusercontent.com/jgehrcke/covid-19-germany-gae/master/cases-rki-by-state.csv")
switzerland <- read_csv("https://raw.githubusercontent.com/openZH/covid_19/master/COVID19_Fallzahlen_CH_total_v2.csv")
name <- c("date", "Schleswig-Holstein", "Hamburg", "Lower Saxony", "Bremen",
"North Rhine-Westphalia", "Hesse", "Rheinland-Pfalz", "Baden-Wuerttemberg",
"Bavaria", "Saarland", "Brandenburg", "Mecklenburg-Vorpommern",
"Saxony", "Saxony-Anhalt", "Thuringia", "Berlin", "sum_cases")
setnames(germany, name)
germany <- germany %>%
melt(id.vars=c("date")) %>%
setnames(c("date", "region", "cases"))%>%
filter(region!="sum_cases")
germany$country<- "Germany"
# France Data
france$other_hospitalization <- france$hospitalises - france$reanimation
france <- france %>%
select(date, nom, casConfirmes, deces, reanimation, other_hospitalization, gueris)
colsum <- france$deces + france$reanimation + france$other_hospitalization + france$gueris
france$estimated_cases <- sapply(1:nrow(france), function (i) { if (!is.na(france$casConfirmes[[i]])) {france$casConfirmes[i]} else {colsum[[i]]}})
france <- france %>%
select(date, nom, estimated_cases)%>%
setnames(c("date", "region", "cases"))
france$country<- "France"
# Italy Data
italy <- italy %>%
select(data, denominazione_regione, totale_casi) %>%
setnames(c("date", "region", "cases"))
italy$country<- "Italy"
#Switzerland
switzerland <- switzerland %>%
select(date, abbreviation_canton_and_fl, ncumul_conf) %>%
setnames(c("date", "region", "cases"))%>%
filter(region!="FL")%>%
mutate(
region = recode(
region,
"AG"="Aargau",
"AI"="Appenzell Ausserrhoden",
"AR"="Appenzell Innerrhoden",
"BE"="Bern",
"BL"="Basel-Landschaft",
"BS"="Basel-City",
"FR"="Fribourg",
"GE"="Geneva",
"GL"="Glarus",
"GR"="Grisons",
"JU"="Jura",
"LU"="Lucerne",
"NE"="Neuchatel",
"NW"="Nidwalden",
"OW"="Obwalden",
"SG"="Saint Gallen",
"SH"="Schaffhausen",
"SO"="Solothurn",
"SZ"="Schwyz",
"TG"="Thurgau",
"TI"="Ticino",
"UR"="Uri",
"VD"="Vaud",
"VS"="Valais",
"ZG"="Zug",
"ZH"="Zurich",
.default = region
))
switzerland$country<- "Switzerland"
#merge
cases_combined<- rbind(france,germany,italy,switzerland)
suedtirol <- cases_combined %>%
filter(country == "Italy") %>%
filter(region == "P.A. Bolzano" | region == "P.A. Trento")
suedtirol <- unique(suedtirol)
suedtirol <- aggregate(list(cases=suedtirol$cases), by=list(date=suedtirol$date), FUN=sum)
suedtirol$region <- "Trentino-Alto Adige"
suedtirol$country <- "Italy"
suedtirol <- setnames(suedtirol, c("date", "cases", "region", "country"))
suedtirol <- suedtirol %>%
select(date, region, cases, country)
cases_combined <- rbind(unique(cases_combined), suedtirol) %>%
filter(region != "P.A. Bolzano") %>%
filter(region != "P.A. Trento") %>%
arrange(country, region, date)
cases_germany <- cases_combined %>% filter(country == "Germany")
cases_france <- cases_combined %>% filter(country == "France")
cases_italy <- cases_combined %>% filter(country == "Italy")
cases_switzerland <- cases_combined %>% filter(country == "Switzerland")
table(cases_switzerland$region)
write_csv(cases_combined, "data/Cases/combined_cases.csv")
geodict <- read_delim("data/EUROSTAT_NUTS2_controls/geo.dic", "\t", col_names = c("code", "region"))
#reg <- function(x) { grepl("^DE[1-9A-G]$", x) | grepl("^CH0[1-7]$", x) | grepl("^FR[1-9A-M]$|^FRY[1-5]$", x) | grepl("^IT[A-Z][1-9]$", x)}
reg <- function(x) { grepl("^DE$", x) | grepl("^CH$", x) | grepl("^FR$", x) | grepl("^IT$", x)}
activity_rates <- get_eurostat("lfst_r_lfp2actrtn", time_format = "num") %>%
filter(reg(geo)) %>%
filter(time == max(time)) %>%
left_join(geodict, by=c("geo" = "code")) %>%
filter(citizen == "EU27_2020_FOR" & isced11 == "TOTAL" & age == "Y15-64" & sex == "T") %>%
select(values, region) %>%
setnames(c("eurostat_activity_rate_2019", "region"))
agriculture <- get_eurostat("agr_r_accts", time_format = "num") %>%
filter(reg(geo)) %>%
filter(time == max(time)) %>%
filter(unit == "MIO_EUR") %>%
filter(indic_ag == "PROD_BP") %>%
left_join(geodict, by=c("geo" = "code")) %>%
inner_join(agrdict, by = c("itm_newa" = "Notation")) %>%
filter(itm_newa %in% c("01000", "04000", "12000", "13000", "16000")) %>%
dcast(geo + region ~ indic_ag + Label + unit, fun.aggregate = median, value.var = "values") %>%
select(-geo) %>%
setnames(c("region", "eurostat_prodbp_agricultural_output_mioeur_2018",
"eurostat_prodbp_animal_output_mioeur_2018", "eurostat_prodbp_animal_products_mioeur_2018", "eurostat_prodbp_cereals_seeds_mioeur_2018", "eurostat_prodbp_vegetables_horticultural_mioeur_2018"))
poverty_risk <- get_eurostat("ilc_li41", time_format = "num") %>%
filter(reg(geo)) %>%
filter(time == max(time)) %>%
left_join(geodict, by=c("geo" = "code")) %>%
select(region, values) %>%
setnames(c("region", "eurostat_poverty_risk_rate_2018"))
employment_education <- get_eurostat("lfst_r_lfe2eedu", time_format = "num") %>%
filter(reg(geo)) %>%
filter(time == max(time)) %>%
left_join(geodict, by=c("geo" = "code")) %>%
filter(sex == "T" & isced11 == "TOTAL" & age == "Y_GE15") %>%
select(region, values) %>%
setnames(c("region", "eurostat_employment_thousands_2019"))
employment_sector_growth_2017 <- get_eurostat("sbs_r_nuts06_r2", time_format = "num") %>%
filter(reg(geo)) %>%
filter(time == max(time)) %>%
left_join(geodict, by=c("geo" = "code")) %>%
filter(indic_sb %in% c("V11210", "V13320", "V16110", "V91290", "V94310")) %>%
filter(nace_r2 %in% c("A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "L",
"M", "N", "O", "P", "Q", "R", "S", "T", "U", "V",
"W", "X", "Y", "Z")) %>%
inner_join(nacer2dict, by=c("nace_r2" = "Notation")) %>%
inner_join(indicsbdict, by=c("indic_sb" = "Notation")) %>%
dcast(geo + region ~ Label.x + Label.y, fun.aggregate = median, value.var = "values") %>%
select(-geo)
employment_sector_activity <- get_eurostat("nama_10r_2emhrw", time_format = "num") %>%
filter(reg(geo)) %>%
filter(time == max(time)) %>%
left_join(geodict, by=c("geo" = "code")) %>%
left_join(nacer2dict, by=c("nace_r2" = "Notation")) %>%
dcast(geo + region ~ Label, fun.aggregate = median, value.var = "values") %>%
select(-geo)
gdp <- get_eurostat("nama_10r_2gdp", time_format = "num") %>%
filter(reg(geo)) %>%
filter(time == max(time)) %>%
filter(unit %in% c("MIO_EUR", "EUR_HAB")) %>%
left_join(geodict, by=c("geo" = "code")) %>%
dcast(geo + region ~ unit, fun.aggregate = median, value.var = "values") %>%
select(region, MIO_EUR, EUR_HAB) %>%
setnames(c("region", "eurostat_gdp_mio_eur_2018", "eurostat_gdp_eur_hab_2018"))
health_personnel <- get_eurostat("hlth_rs_prsrg", time_format = "num") %>%
filter(reg(geo)) %>%
# not enough info otherwise
filter(time == "2018") %>%
left_join(geodict, by=c("geo" = "code")) %>%
dcast(geo + region ~ unit, fun.aggregate = median, value.var = "values") %>%
select(region, HAB_P, NR, P_HTHAB) %>%
setnames(c("region", "eurostat_inhabitants_per_doctor_2018", "eurostat_doctors_nr_2018", "eurostat_doctors_per_100000_inhabitants_2018"))
hospital_beds <- get_eurostat("hlth_rs_bdsrg", time_format = "num") %>%
filter(reg(geo)) %>%
filter(time == max(time)) %>%
left_join(geodict, by=c("geo" = "code")) %>%
dcast(geo + region ~ unit, fun.aggregate = median, value.var = "values") %>%
select(region, HAB_P, NR, P_HTHAB) %>%
setnames(c("region", "eurostat_inhabitants_per_hospital_beds_2018", "eurostat_hospital_beds_nr_2018", "eurostat_hospital_beds_per_100000_inhabitants_2018"))
household_income <- get_eurostat("nama_10r_2hhinc", time_format = "num") %>%
filter(reg(geo)) %>%
filter(time == "2017") %>%
filter(unit %in% c("MIO_EUR", "EUR_HAB")) %>%
filter(na_item %in% c("B5N", "B7N")) %>%
left_join(geodict, by=c("geo" = "code")) %>%
dcast(geo + region ~ unit, fun.aggregate = median, value.var = "values") %>%
select(region, MIO_EUR, EUR_HAB) %>%
setnames(c("region", "eurostat_household_income_mioeur_B5N_2017", "eurostat_household_income_eur_per_inhabitant_B5N_2017"))
long_term_unemployment <- get_eurostat("lfst_r_lfu2ltu", time_format = "num") %>%
filter(reg(geo)) %>%
filter(time == max(time)) %>%
left_join(geodict, by=c("geo" = "code")) %>%
dcast(geo + region ~ unit, fun.aggregate = median, value.var = "values") %>%
select(region, PC_ACT, PC_UNE, THS) %>%
setnames(c("region", "eurostat_lt_unemp_percentage_active_2019", "eurostat_lt_unemp_percentage_unemp_2019", "eurostat_lt_unemp_thousands_2019"))
percentage_unemployment_gender <- get_eurostat("lfst_r_lfu3rt", time_format = "num") %>%
filter(reg(geo)) %>%
filter(time == max(time)) %>%
left_join(geodict, by=c("geo" = "code")) %>%
filter(age == "Y_GE15") %>%
select(region, values) %>%
setnames(c("region", "eurostat_percentage_unemployment_2019"))
population_education <- get_eurostat("edat_lfse_04", time_format = "num") %>%
filter(reg(geo)) %>%
filter(time == max(time)) %>%
filter(sex == "T") %>%
left_join(geodict, by=c("geo" = "code")) %>%
dcast(geo + region ~ isced11, fun.aggregate = median, value.var = "values") %>%
select(region, "ED0-2", "ED3-8", "ED3_4", "ED5-8") %>%
setnames(c("region", "eurostat_percentage_ED0-2_2019", "eurostat_percentage_ED3-8_2019", "eurostat_percentage_ED3_4_2019",
"eurostat_percentage_ED5-8_2019"))
population_sex <- get_eurostat("demo_r_d2jan", time_format = "num") %>%
filter(reg(geo)) %>%
filter(time == max(time)) %>%
filter(age == "TOTAL") %>%
left_join(geodict, by=c("geo" = "code")) %>%
dcast(geo + region ~ sex, fun.aggregate = median, value.var = "values") %>%
select(region, "F", "M", "T") %>%
setnames(c("region", "eurostat_female_population_2019", "eurostat_male_population_2019", "eurostat_total_population_2019"))
poverty_exclusion <- get_eurostat("ilc_peps11", time_format = "num") %>%
filter(reg(geo)) %>%
filter(time == max(time)) %>%
left_join(geodict, by=c("geo" = "code")) %>%
select(region, values) %>%
setnames(c("region", "eurostat_risk_poverty_or_social_exclusion_2019"))
severe_deprivation <- get_eurostat("ilc_mddd21", time_format = "num") %>%
filter(reg(geo)) %>%
filter(time == max(time)) %>%
left_join(geodict, by=c("geo" = "code")) %>%
select(region, values) %>%
setnames(c("region", "eurostat_severe_material_deprivation_rate_2018"))
unemployment_sex <- get_eurostat("lfst_r_lfu3pers", time_format = "num") %>%
filter(reg(geo)) %>%
filter(time == max(time)) %>%
left_join(geodict, by=c("geo" = "code")) %>%
filter(age == "Y_GE15") %>%
dcast(geo + region ~ sex, fun.aggregate = median, value.var = "values") %>%
select(region, "F", "M", "T") %>%
setnames(c("region", "eurostat_female_unemployment_thousand_2019", "eurostat_male_unemployment_thousand_2019", "eurostat_total_unemployment_thousand_2019"))
get_eurostat("demo_r_d3dens", time_format = "num") %>%
filter(grepl("CH0[0-9][0-9]", geo))
eurostat_data <- activity_rates %>%
left_join(agriculture, by="region") %>%
left_join(poverty_risk, by="region") %>%
left_join(employment_education, by="region") %>%
left_join(employment_sector_growth_2017, by="region") %>%
left_join(employment_sector_activity, by="region") %>%
left_join(gdp, by="region") %>%
left_join(health_personnel, by="region") %>%
left_join(hospital_beds, by="region") %>%
left_join(household_income, by="region") %>%
left_join(long_term_unemployment, by="region") %>%
left_join(percentage_unemployment_gender, by="region") %>%
left_join(population_education, by="region") %>%
left_join(population_sex, by="region") %>%
left_join(poverty_exclusion, by="region") %>%
left_join(severe_deprivation, by="region") %>%
left_join(unemployment_sex, by="region")
activity_rates %>%
dcast(geo + region ~ isced11 + age + sex, fun.aggregate = median, value.var = "values")
activity_rates %>%
dcast(geo + region ~ isced11 + age + sex, fun.aggregate = median, value.var = "values")
agriculture %>%
select(-unit) %>%
dcast(geo + region ~ indic_ag + itm_newa, fun.aggregate = median, value.var = "values")
poverty_risk %>%
select(-unit)
employment_education %>%
select(-unit) %>%
dcast(geo + region ~ isced11 + age + sex, fun.aggregate = median, value.var = "values")
employment_sector_growth %>%
dcast(geo + region ~ nace_r2 + indic_sb, fun.aggregate = median, value.var = "values")
employment_sector_activity %>%
#mutate(values = values * 1000) %>%
select(-unit) %>%
dcast(geo + region ~ wstatus + nace_r2, fun.aggregate = median, value.var = "values")
gdp %>%
dcast(geo + region ~ unit, fun.aggregate = median, value.var = "values")
health_personnel %>%
dcast(geo + region ~ isco08, fun.aggregate = median, value.var = "values")
hospital_beds %>%
dcast(geo + region ~ unit, fun.aggregate = median, value.var = "values")
household_income %>%
dcast(geo + region ~ unit + direct + na_item, fun.aggregate = median, value.var = "values")
long_term_unemployment %>%
dcast(geo + region ~ unit, fun.aggregate = median, value.var = "values")
percentage_unemployment_gender %>%
dcast(geo + region ~ age + sex, fun.aggregate = median, value.var = "values")
population_education %>%
dcast(geo + region ~ age + sex, fun.aggregate = median, value.var = "values")
population_gender %>%
dcast(geo + region ~ age + sex, fun.aggregate = median, value.var = "values")
poverty_exclusion %>%
select(-unit)
severe_deprivation %>%
select(-unit)
unemployment_gender %>%
select(-unit) %>%
dcast(geo + region ~ age + sex, fun.aggregate = median, value.var = "values")
#activity_rates <- activity_rates %>%
#  select(-citizen, -unit, -time)
activity_rates2 <- activity_rates %>%
#reshape(idvar = c("geo", "region"), timevar = "isced11", direction = "wide")
melt(id=c("geo", "region", "values")) %>%
dcast(geo + region + values ~ value)
#dcast(geo + region ~ isced11 + age + sex)
education <- activity_rates2 %>%
select(geo, region, values, `ED0-2`, ED3_4, `ED5-8`, NRP, TOTAL) %>%
group_by(geo, region, values) %>%
#mutate_each(funs(an = as.numeric(as.character(.)))) %>%
gather(education, val, -geo, -region, -values) %>%
filter(val == 1) %>%
select(-val) %>%
arrange(geo, region, values)
age <- activity_rates2 %>%
select(geo, region, values, `Y15-64`, `Y20-64`, `Y25-54`, `Y55-64`) %>%
group_by(geo, region, values) %>%
gather(age, val, -geo, -region, -values) %>%
filter(val == 1) %>%
select(-val) %>%
arrange(geo, region, values)
sex <- activity_rates2 %>%
select(geo, region, values, `F`, `M`, `T`) %>%
group_by(geo, region, values) %>%
gather(sex, val, -geo, -region, -values) %>%
filter(val == 1) %>%
select(-val) %>%
arrange(geo, region, values)
education %>%
inner_join(sex, by=c("geo" = "geo", "region" = "region", "values" = "values")) %>%
inner_join(age, by=c("geo" = "geo", "region" = "region", "values" = "values"))
# Cases Merge
# By Anelia Petrova and Luca Messerschmidt
# August 19 2020
rm(list=ls())
library(plyr)
library(tidyverse)
library(data.table)
library(plotly)
library(reshape2)
library(eurostat)
require(gridExtra)
library(lubridate)
coronanet <- read_csv("https://raw.githubusercontent.com/LuMesserschmidt/WEP_analysis/master/data/CoronaNet/coronanet_internal.csv") %>%
filter(country %in% c("France", "Germany", "Italy", "Switzerland"))
#Load merged Data
italy <- read_csv("data/Cases/Italy/italy_dashboard/data_regions.csv")
france <- read_csv("data/Cases/France/france_subnational.csv")
germany <- read_csv("https://raw.githubusercontent.com/jgehrcke/covid-19-germany-gae/master/cases-rki-by-state.csv")
switzerland <- read_csv("https://raw.githubusercontent.com/openZH/covid_19/master/COVID19_Fallzahlen_CH_total_v2.csv")
name <- c("date", "Schleswig-Holstein", "Hamburg", "Lower Saxony", "Bremen",
"North Rhine-Westphalia", "Hesse", "Rheinland-Pfalz", "Baden-Wuerttemberg",
"Bavaria", "Saarland", "Brandenburg", "Mecklenburg-Vorpommern",
"Saxony", "Saxony-Anhalt", "Thuringia", "Berlin", "sum_cases")
setnames(germany, name)
germany <- germany %>%
melt(id.vars=c("date")) %>%
setnames(c("date", "region", "cases"))%>%
filter(region!="sum_cases")
germany$country<- "Germany"
# France Data
france$other_hospitalization <- france$hospitalises - france$reanimation
france <- france %>%
select(date, nom, casConfirmes, deces, reanimation, other_hospitalization, gueris)
colsum <- france$deces + france$reanimation + france$other_hospitalization + france$gueris
france$estimated_cases <- sapply(1:nrow(france), function (i) { if (!is.na(france$casConfirmes[[i]])) {france$casConfirmes[i]} else {colsum[[i]]}})
france <- france %>%
select(date, nom, estimated_cases)%>%
setnames(c("date", "region", "cases"))
france$country<- "France"
# Italy Data
italy <- italy %>%
select(data, denominazione_regione, totale_casi) %>%
setnames(c("date", "region", "cases"))
italy$country<- "Italy"
#Switzerland
switzerland <- switzerland %>%
select(date, abbreviation_canton_and_fl, ncumul_conf) %>%
setnames(c("date", "region", "cases"))%>%
filter(region!="FL")%>%
mutate(
region = recode(
region,
"AG"="Aargau",
"AI"="Appenzell Ausserrhoden",
"AR"="Appenzell Innerrhoden",
"BE"="Bern",
"BL"="Basel-Landschaft",
"BS"="Basel-City",
"FR"="Fribourg",
"GE"="Geneva",
"GL"="Glarus",
"GR"="Grisons",
"JU"="Jura",
"LU"="Lucerne",
"NE"="Neuchatel",
"NW"="Nidwalden",
"OW"="Obwalden",
"SG"="Saint Gallen",
"SH"="Schaffhausen",
"SO"="Solothurn",
"SZ"="Schwyz",
"TG"="Thurgau",
"TI"="Ticino",
"UR"="Uri",
"VD"="Vaud",
"VS"="Valais",
"ZG"="Zug",
"ZH"="Zurich",
.default = region
))
switzerland$country<- "Switzerland"
#merge
cases_combined<- rbind(france,germany,italy,switzerland)
suedtirol <- cases_combined %>%
filter(country == "Italy") %>%
filter(region == "P.A. Bolzano" | region == "P.A. Trento")
suedtirol <- unique(suedtirol)
suedtirol <- aggregate(list(cases=suedtirol$cases), by=list(date=suedtirol$date), FUN=sum)
suedtirol$region <- "Trentino-Alto Adige"
suedtirol$country <- "Italy"
suedtirol <- setnames(suedtirol, c("date", "cases", "region", "country"))
suedtirol <- suedtirol %>%
select(date, region, cases, country)
cases_combined <- rbind(unique(cases_combined), suedtirol) %>%
filter(region != "P.A. Bolzano") %>%
filter(region != "P.A. Trento") %>%
arrange(country, region, date)
cases_germany <- cases_combined %>% filter(country == "Germany")
cases_france <- cases_combined %>% filter(country == "France")
cases_italy <- cases_combined %>% filter(country == "Italy")
cases_switzerland <- cases_combined %>% filter(country == "Switzerland")
table(cases_switzerland$region)
write_csv(cases_combined, "data/Cases/combined_cases.csv")
days <- seq(from=as.Date('2020-01-01'), to=as.Date("2020-07-28"),by='days')
for (i in seq_along(days)) {
for (x in unique(cases_combined$region)) {
if (length(cases_combined[cases_combined$region == x & cases_combined$date == days[i],]$country) < 1) {
cases_combined <- rbind(cases_combined, data.frame(date = days[i], region = x, cases = 0, country = cases_combined[cases_combined$region == x,]$country[1]))
}
}
}
View(cases_combined)
length(cases_combined[cases_combined$region == "Bavaria" & cases_combined$date == "2020-03-31",]$country)
cases_combined <- cases_combined %>%
arrange(date, country, region)
View(cases_combined)
merged <- read_csv("data/Cases/combined_cases.csv")
View(cases_combined)
cases_national <- cases_combined %>% group_by(date, country) %>% summarize(national_cases<- sum(cases,na.rm = T))
cases_national <- cases_combined %>% group_by(date, country,region) %>% summarize(national_cases<- sum(cases,na.rm = T))
View(cases_national)
cases_combined %>%
group_by(date) %>%
summarise(Frequency = sum(cases))
cases_combined %>%
group_by(date) %>%
summarise(Frequency = sum(cases, na.rm=T))
cases_combined <- cases_combined %>%
arrange(date, country, region)%>%
as.data.frame()
cases_combined <- cases_combined %>%
arrange(date, country, region)%>%
ungroup()%>%
as.data.frame()
cases_national <- cases_combined %>% group_by(date, country,region) %>% summarize(national_cases <- sum(cases,na.rm = T))
cases_combined %>%
group_by(date) %>%
summarise(Frequency = sum(cases, na.rm=T))
cases_combined %>%
group_by(date,country) %>%
summarise(Frequency = sum(cases, na.rm=T))
cases_combined %>%
dplyr::group_by(date,country) %>%
dplyr::summarise(Frequency = sum(cases, na.rm=T))
cases_national <- cases_combined %>% dplyr::group_by(date, country,region) %>% dplyr::summarize(national_cases <- sum(cases,na.rm = T))
View(cases_national)
cases_national <- cases_combined %>% dplyr::group_by(date, country,region) %>% dplyr::summarize(national_cases =sum(cases,na.rm = T))
View(cases_national)
cases_national <- cases_combined %>% dplyr::group_by(date, country) %>% dplyr::summarize(national_cases =sum(cases,na.rm = T))
View(cases_national)
cases_national <- cases_combined %>% dplyr::group_by(date, country) %>% dplyr::summarize(national_cases =sum(cases,na.rm = T))%>% mutate(cases_national = cases_national - lag(cases_national))
View(cases_national)
cases_national%>% mutate(national_cases = national_cases - lag(national_cases))
View(cases_national)
cases_national%>% mutate(dif = national_cases - lag(national_cases))
cases_national <- cases_combined %>% dplyr::group_by(date, country) %>% dplyr::summarize(national_cases =sum(cases,na.rm = T))
test<-cases_national%>% mutate(dif = national_cases - lag(national_cases))
View(test)
test<-cases_national%>%   group_by(country) %>% mutate(dif = national_cases - lag(national_cases))
View(test)
test<-cases_national%>%   group_by(country,date) %>% mutate(dif = national_cases - lag(national_cases))
View(test)
test<-cases_national%>%   group_by(country,date) %>% dplyr::mutate(dif = national_cases - lag(national_cases))
View(test)
test<-cases_national%>%   group_by(country,date) %>% dplyr::mutate(dif = national_cases - 5)
View(test)
test<-cases_national%>%   group_by(country,date) %>% dplyr::mutate(dif = national_cases - lag(national_cases))
View(test)
test<-cases_national %>%   dplyr::group_by(country,date) %>% dplyr::mutate(lag = national_cases - lag(national_cases))
View(test)
rm(list=ls())
