merged_regional<- cases_combined
merged_regional <- merged_regional %>%
group_by(country, region) %>%
mutate(
new_cases = cases - lag(cases),
new_cases_national = cases_national - lag(cases_national)
)%>%
drop_na(region)
# compute columns as described in cases_concentration.R
merged_regional2 <- merged_regional %>%
select(date, country, region, cases, new_cases, new_cases_national) %>%
unique() %>%
group_by(country, region) %>%
mutate(rolling_average = rollapply(cases, 7, mean, fill=NA)) %>%
mutate(past_average = rollapply(cases, 7, mean, align="right", fill=NA))
merged_regional2 <- merged_regional %>%
select(date, country, region, cases, new_cases, new_cases_national) %>%
unique() %>%
group_by(country, region) %>%
mutate(rolling_average = rollapply(cases, 7, mean, fill=NA)) %>%
mutate(past_average = rollapply(cases, 7, mean, align="right", fill=NA)) %>%
mutate(rolling_average_new_cases = rollapply(new_cases, 7, mean, fill=NA)) %>%
mutate(past_average_new_cases = rollapply(new_cases, 7, mean, align="right", fill=NA))
View(merged_regional2)
merged_regional2 <- merged_regional %>%
select(date, country, region, cases, new_cases, new_cases_national) %>%
unique() %>%
group_by(country, region) %>%
mutate(rolling_average = rollapply(cases, 7, mean, fill=NA)) %>%
mutate(past_average = rollapply(cases, 7, mean, align="right", fill=NA)) %>%
mutate(rolling_average_new_cases = rollapply(new_cases, 7, mean, fill=NA)) %>%
mutate(past_average_new_cases = rollapply(new_cases, 7, mean, align="right", fill=NA)) %>%
mutate(past_average_new_cases_national = rollapply(new_cases_national, 7, mean, align="right", fill=NA))
merged_regional2 <- merged_regional %>%
select(date, country, region, cases, new_cases, new_cases_national) %>%
unique() %>%
group_by(country, region) %>%
mutate(rolling_average = rollapply(cases, 7, mean, fill=NA)) %>%
mutate(past_average = rollapply(cases, 7, mean, align="right", fill=NA)) %>%
mutate(rolling_average_new_cases = rollapply(new_cases, 7, mean, fill=NA)) %>%
mutate(past_average_new_cases = rollapply(new_cases, 7, mean, align="right", fill=NA)) %>%
mutate(past_average_new_cases_national = rollapply(new_cases_national, 7, mean, align="right", fill=NA)) %>%
left_join(merged_regional %>% select(-region,-cases,-new_cases,-new_cases_national), by=c("date"="date","country"="country"))
View(merged_regional2)
merged_regional$measure_H1_H2<- merged_regional$past_average_new_cases_national/merged_regional$sum_pop
merged_regional2 <- merged_regional %>%
select(date, country, region, cases, new_cases, new_cases_national) %>%
unique() %>%
group_by(country, region) %>%
mutate(rolling_average = rollapply(cases, 7, mean, fill=NA)) %>%
mutate(past_average = rollapply(cases, 7, mean, align="right", fill=NA)) %>%
mutate(rolling_average_new_cases = rollapply(new_cases, 7, mean, fill=NA)) %>%
mutate(past_average_new_cases = rollapply(new_cases, 7, mean, align="right", fill=NA)) %>%
mutate(past_average_new_cases_national = rollapply(new_cases_national, 7, mean, align="right", fill=NA))
merged_regional2$measure_H1_H2<- merged_regional2$past_average_new_cases_national/merged_regional2$sum_pop
View(merged_regional2)
View(merged_regional2)
merged_regional <- merged_regional %>%
select(date, country, region, cases, new_cases, new_cases_national) %>%
unique() %>%
group_by(country, region) %>%
mutate(rolling_average = rollapply(cases, 7, mean, fill=NA)) %>%
mutate(past_average = rollapply(cases, 7, mean, align="right", fill=NA)) %>%
mutate(rolling_average_new_cases = rollapply(new_cases, 7, mean, fill=NA)) %>%
mutate(past_average_new_cases = rollapply(new_cases, 7, mean, align="right", fill=NA)) %>%
mutate(past_average_new_cases_national = rollapply(new_cases_national, 7, mean, align="right", fill=NA))
merged_regional$measure_H1_H2<- merged_regional$past_average_new_cases_national/merged_regional$sum_pop
eurostat_national <- read_csv("data/eurostat_data_national.csv")
df_euro <- read_csv("data/merged_final.csv", guess_max = 10000)
names(df_euro)
df_euro <- read_csv("data/merged_final.csv", guess_max = 10000)%>% select(14,15)
df_euro <- read_csv("data/merged_final.csv", guess_max = 10000)%>% select(14,15)%>% unique()
View(df_euro)
df_euro <- read_csv("data/merged_final.csv", guess_max = 10000)%>% select(2,314,15)%>% unique()
df_euro <- read_csv("data/merged_final.csv", guess_max = 10000)%>% select(2,3,14,15)%>% unique()
merged_regional <- merged_regional %>%
select(date, country, region, cases, new_cases, new_cases_national) %>%
unique() %>%
group_by(country, region) %>%
mutate(rolling_average = rollapply(cases, 7, mean, fill=NA)) %>%
mutate(past_average = rollapply(cases, 7, mean, align="right", fill=NA)) %>%
mutate(rolling_average_new_cases = rollapply(new_cases, 7, mean, fill=NA)) %>%
mutate(past_average_new_cases = rollapply(new_cases, 7, mean, align="right", fill=NA)) %>%
mutate(past_average_new_cases_national = rollapply(new_cases_national, 7, mean, align="right", fill=NA)) %>%
left_join(df_euro, by=c(region,country))
merged_regional <- merged_regional %>%
select(date, country, region, cases, new_cases, new_cases_national) %>%
unique() %>%
group_by(country, region) %>%
mutate(rolling_average = rollapply(cases, 7, mean, fill=NA)) %>%
mutate(past_average = rollapply(cases, 7, mean, align="right", fill=NA)) %>%
mutate(rolling_average_new_cases = rollapply(new_cases, 7, mean, fill=NA)) %>%
mutate(past_average_new_cases = rollapply(new_cases, 7, mean, align="right", fill=NA)) %>%
mutate(past_average_new_cases_national = rollapply(new_cases_national, 7, mean, align="right", fill=NA)) %>%
left_join(df_euro, by=c("region"="region","country"="country"))
merged_regional$measure_H1_H2<- merged_regional$past_average_new_cases_national/merged_regional$sum_pop
merged_regional$measure_H3<- (merged_regional$past_average_new_cases/merged_regional$eurostat_total_population_2019) - (merged_regional$measure_H1_H2)
View(merged_regional)
df_main <- read_csv("data/merged_final.csv", guess_max = 10000)
View(df_main)
cases_combined<- read_csv("data/Cases/combined_cases.csv")
View(cases_combined)
cases_national <- cases_national %>%
filter(`Country/Region` %in% c("Germany", "France", "Italy", "Switzerland")) %>%
filter(is.na(`Province/State`)) %>%
select(-`Province/State`, -Lat, -Long) %>%
melt(id.vars=c("Country/Region")) %>%
rename(country = `Country/Region`, date = variable, cases = value) %>%
mutate(date = as.Date(as.character(date), format = "%m/%d/%y"))
cases_national <- cases_national%>%
melt(id.vars=c("Country/Region")) %>%
rename(country = `Country/Region`, date = variable, cases = value) %>%
mutate(date = as.Date(as.character(date), format = "%m/%d/%y"))
cases_combined<- read_csv("data/Cases/combined_cases.csv")
cases_combined <- cases_combined %>%
arrange(date, country, region)
cases_national <- cases_combined %>% dplyr::group_by(date, country) %>% dplyr::summarize(cases_national =sum(cases,na.rm = T))
test <- cases_national%>%
melt(id.vars=c("country")) %>%
rename(country = `country`, date = variable, cases = value) %>%
mutate(date = as.Date(as.character(date), format = "%m/%d/%y"))
View(test)
test <- cases_national%>%
melt(id.vars=c("date")) %>%
rename(country = `country`, date = variable, cases = value) %>%
mutate(date = as.Date(as.character(date), format = "%m/%d/%y"))
View(cases_national)
test <- cases_national%>%
melt(id.vars=c("country")) %>%
rename(country = `country`, date = variable, cases_national = value) %>%
mutate(date = as.Date(as.character(date), format = "%m/%d/%y"))
View(test)
test <- cases_national%>%
melt(id.vars=c("country")) %>%
rename(country = `country`, date = variable, cases_national = value)
View(test)
test <- cases_national%>%
melt(id.vars=c("country")) %>%
mutate(date = as.Date(as.character(date), format = "%m/%d/%y"))%>%
rename(country = `country`, date = variable, cases_national = value)
test <- cases_national%>%
melt(id.vars=c("country"))
View(test)
cases_national <- cases_national %>%
melt(id.vars=c("Country/Region")) %>%
rename(country = `Country/Region`, date = variable, cases = value) %>%
mutate(date = as.Date(as.character(date), format = "%m/%d/%y"))
cases_national2 <- cases_national %>%
melt(id.vars=c("country")) %>%
rename(country = `country`, date = variable, cases = value) %>%
mutate(date = as.Date(as.character(date), format = "%m/%d/%y"))
for (i in seq_along(days)) {
if (length(cases_national[cases_national2$country == x & cases_national2$date == days[i],]$country) < 1) {
cases_national2 <- rbind(cases_national2, data.frame(date = days[i], country = x, cases = 0, region = "National"))
}
for (x in unique(cases_national2$country)) {
if (length(cases_national[cases_national2$country == x & cases_national2$date == days[i],]$country) < 1) {
cases_national2 <- rbind(cases_national2, data.frame(date = days[i], country = x, cases = 0, region = "National"))
}
}
for (i in seq_along(days)) {
for (x in unique(cases_national2$country)) {
if (length(cases_national[cases_national2$country == x & cases_national2$date == days[i],]$country) < 1) {
cases_national2 <- rbind(cases_national2, data.frame(date = days[i], country = x, cases = 0, region = "National"))
}
}
}
days <- seq(from=as.Date('2020-01-01'), to=as.Date("2020-07-28"),by='days')
for (i in seq_along(days)) {
for (x in unique(cases_national2$country)) {
if (length(cases_national[cases_national2$country == x & cases_national2$date == days[i],]$country) < 1) {
cases_national2 <- rbind(cases_national2, data.frame(date = days[i], country = x, cases = 0, region = "National"))
}
}
}
View(cases_national)
# Cases Merge
# By Anelia Petrova and Luca Messerschmidt
# August 19 2020
rm(list=ls())
library(plyr)
library(tidyverse)
library(data.table)
library(plotly)
library(reshape2)
library(eurostat)
require(gridExtra)
library(lubridate)
coronanet <- read_csv("https://raw.githubusercontent.com/LuMesserschmidt/WEP_analysis/master/data/CoronaNet/coronanet_internal.csv") %>%
filter(country %in% c("France", "Germany", "Italy", "Switzerland"))
#Load merged Data
italy <- read_csv("data/Cases/Italy/italy_dashboard/data_regions.csv")
france <- read_csv("data/Cases/France/france_subnational.csv")
germany <- read_csv("https://raw.githubusercontent.com/jgehrcke/covid-19-germany-gae/master/cases-rki-by-state.csv")
switzerland <- read_csv("https://raw.githubusercontent.com/openZH/covid_19/master/COVID19_Fallzahlen_CH_total_v2.csv")
name <- c("date", "Schleswig-Holstein", "Hamburg", "Lower Saxony", "Bremen",
"North Rhine-Westphalia", "Hesse", "Rheinland-Pfalz", "Baden-Wuerttemberg",
"Bavaria", "Saarland", "Brandenburg", "Mecklenburg-Vorpommern",
"Saxony", "Saxony-Anhalt", "Thuringia", "Berlin", "sum_cases")
setnames(germany, name)
germany <- germany %>%
melt(id.vars=c("date")) %>%
setnames(c("date", "region", "cases"))%>%
filter(region!="sum_cases")
germany$country<- "Germany"
# France Data
france$other_hospitalization <- france$hospitalises - france$reanimation
france <- france %>%
select(date, nom, casConfirmes, deces, reanimation, other_hospitalization, gueris)
colsum <- france$deces + france$reanimation + france$other_hospitalization + france$gueris
france$estimated_cases <- sapply(1:nrow(france), function (i) { if (!is.na(france$casConfirmes[[i]])) {france$casConfirmes[i]} else {colsum[[i]]}})
france <- france %>%
select(date, nom, estimated_cases)%>%
setnames(c("date", "region", "cases"))
france$country<- "France"
# Italy Data
italy <- italy %>%
select(data, denominazione_regione, totale_casi) %>%
setnames(c("date", "region", "cases"))
italy$country<- "Italy"
#Switzerland
switzerland <- switzerland %>%
select(date, abbreviation_canton_and_fl, ncumul_conf) %>%
setnames(c("date", "region", "cases"))%>%
filter(region!="FL")%>%
mutate(
region = recode(
region,
"AG"="Aargau",
"AI"="Appenzell Ausserrhoden",
"AR"="Appenzell Innerrhoden",
"BE"="Bern",
"BL"="Basel-Landschaft",
"BS"="Basel-City",
"FR"="Fribourg",
"GE"="Geneva",
"GL"="Glarus",
"GR"="Grisons",
"JU"="Jura",
"LU"="Lucerne",
"NE"="Neuchatel",
"NW"="Nidwalden",
"OW"="Obwalden",
"SG"="Saint Gallen",
"SH"="Schaffhausen",
"SO"="Solothurn",
"SZ"="Schwyz",
"TG"="Thurgau",
"TI"="Ticino",
"UR"="Uri",
"VD"="Vaud",
"VS"="Valais",
"ZG"="Zug",
"ZH"="Zurich",
.default = region
))
switzerland$country<- "Switzerland"
#merge
cases_combined<- rbind(france,germany,italy,switzerland)
suedtirol <- cases_combined %>%
filter(country == "Italy") %>%
filter(region == "P.A. Bolzano" | region == "P.A. Trento")
suedtirol <- unique(suedtirol)
suedtirol <- aggregate(list(cases=suedtirol$cases), by=list(date=suedtirol$date), FUN=sum)
suedtirol$region <- "Trentino-Alto Adige"
suedtirol$country <- "Italy"
suedtirol <- setnames(suedtirol, c("date", "cases", "region", "country"))
suedtirol <- suedtirol %>%
select(date, region, cases, country)
cases_combined <- rbind(unique(cases_combined), suedtirol) %>%
filter(region != "P.A. Bolzano") %>%
filter(region != "P.A. Trento") %>%
arrange(country, region, date)
cases_germany <- cases_combined %>% filter(country == "Germany")
cases_france <- cases_combined %>% filter(country == "France")
cases_italy <- cases_combined %>% filter(country == "Italy")
cases_switzerland <- cases_combined %>% filter(country == "Switzerland")
days <- seq(from=as.Date('2020-01-01'), to=as.Date("2020-07-28"),by='days')
for (i in seq_along(days)) {
for (x in unique(cases_combined$region)) {
if (length(cases_combined[cases_combined$region == x & cases_combined$date == days[i],]$country) < 1) {
cases_combined <- rbind(cases_combined, data.frame(date = days[i], region = x, cases = 0, country = cases_combined[cases_combined$region == x,]$country[1]))
}
}
}
write_csv(cases_combined, "data/Cases/combined_cases.csv")
cases_combined<- read_csv("data/Cases/combined_cases.csv")
cases_combined <- cases_combined %>%
arrange(date, country, region)
cases_national <- cases_combined %>% dplyr::group_by(date, country) %>% dplyr::summarize(cases_national =sum(cases,na.rm = T))
cases_national$region <- "National"
cases_national <- cases_national %>%
arrange(date, country)
cases_combined <- left_join(cases_combined, cases_national,by=c("country","date"))
cases_combined <- cases_combined %>%
filter(date <= "2020-07-22")
write_csv(cases_combined, "data/Cases/combined_cases.csv")
View(cases_combined)
cases_combined<- read_csv("data/Cases/combined_cases.csv")
cases_combined <- cases_combined %>%
arrange(date, country, region)
cases_national <- cases_combined %>% dplyr::group_by(date, country) %>% dplyr::summarize(cases_national =sum(cases,na.rm = T))
cases_national$region <- "National"
cases_national <- cases_combined %>% dplyr::group_by(date, country) %>% dplyr::summarize(cases_national =sum(cases,na.rm = T))
cases_national <- cases_national %>%
arrange(date, country)
cases_combined <- left_join(cases_combined, cases_national,by=c("country","date"))
cases_combined <- cases_combined %>%
filter(date <= "2020-07-22")
View(cases_combined)
cases_combined<- read_csv("data/Cases/combined_cases.csv")
cases_combined <- cases_combined %>%
arrange(date, country, region)
cases_national <- cases_combined %>% dplyr::group_by(date, country) %>% dplyr::summarize(cases_national =sum(cases,na.rm = T))
cases_national <- cases_national %>%
arrange(date, country)
cases_combined <- left_join(cases_combined, cases_national,by=c("country","date"))
cases_combined <- cases_combined %>%
filter(date <= "2020-07-22")
View(cases_combined)
cases_combined<- read_csv("data/Cases/combined_cases.csv")
View(cases_combined)
rm(list=ls())
library(plyr)
library(tidyverse)
library(data.table)
library(plotly)
library(reshape2)
library(eurostat)
require(gridExtra)
library(lubridate)
coronanet <- read_csv("https://raw.githubusercontent.com/LuMesserschmidt/WEP_analysis/master/data/CoronaNet/coronanet_internal.csv") %>%
filter(country %in% c("France", "Germany", "Italy", "Switzerland"))
#Load merged Data
italy <- read_csv("data/Cases/Italy/italy_dashboard/data_regions.csv")
france <- read_csv("data/Cases/France/france_subnational.csv")
germany <- read_csv("https://raw.githubusercontent.com/jgehrcke/covid-19-germany-gae/master/cases-rki-by-state.csv")
switzerland <- read_csv("https://raw.githubusercontent.com/openZH/covid_19/master/COVID19_Fallzahlen_CH_total_v2.csv")
name <- c("date", "Schleswig-Holstein", "Hamburg", "Lower Saxony", "Bremen",
"North Rhine-Westphalia", "Hesse", "Rheinland-Pfalz", "Baden-Wuerttemberg",
"Bavaria", "Saarland", "Brandenburg", "Mecklenburg-Vorpommern",
"Saxony", "Saxony-Anhalt", "Thuringia", "Berlin", "sum_cases")
setnames(germany, name)
germany <- germany %>%
melt(id.vars=c("date")) %>%
setnames(c("date", "region", "cases"))%>%
filter(region!="sum_cases")
germany$country<- "Germany"
# France Data
france$other_hospitalization <- france$hospitalises - france$reanimation
france <- france %>%
select(date, nom, casConfirmes, deces, reanimation, other_hospitalization, gueris)
colsum <- france$deces + france$reanimation + france$other_hospitalization + france$gueris
france$estimated_cases <- sapply(1:nrow(france), function (i) { if (!is.na(france$casConfirmes[[i]])) {france$casConfirmes[i]} else {colsum[[i]]}})
france <- france %>%
select(date, nom, estimated_cases)%>%
setnames(c("date", "region", "cases"))
france$country<- "France"
# Italy Data
italy <- italy %>%
select(data, denominazione_regione, totale_casi) %>%
setnames(c("date", "region", "cases"))
italy$country<- "Italy"
#Switzerland
switzerland <- switzerland %>%
select(date, abbreviation_canton_and_fl, ncumul_conf) %>%
setnames(c("date", "region", "cases"))%>%
filter(region!="FL")%>%
mutate(
region = recode(
region,
"AG"="Aargau",
"AI"="Appenzell Ausserrhoden",
"AR"="Appenzell Innerrhoden",
"BE"="Bern",
"BL"="Basel-Landschaft",
"BS"="Basel-City",
"FR"="Fribourg",
"GE"="Geneva",
"GL"="Glarus",
"GR"="Grisons",
"JU"="Jura",
"LU"="Lucerne",
"NE"="Neuchatel",
"NW"="Nidwalden",
"OW"="Obwalden",
"SG"="Saint Gallen",
"SH"="Schaffhausen",
"SO"="Solothurn",
"SZ"="Schwyz",
"TG"="Thurgau",
"TI"="Ticino",
"UR"="Uri",
"VD"="Vaud",
"VS"="Valais",
"ZG"="Zug",
"ZH"="Zurich",
.default = region
))
switzerland$country<- "Switzerland"
#merge
cases_combined<- rbind(france,germany,italy,switzerland)
suedtirol <- cases_combined %>%
filter(country == "Italy") %>%
filter(region == "P.A. Bolzano" | region == "P.A. Trento")
suedtirol <- unique(suedtirol)
suedtirol <- aggregate(list(cases=suedtirol$cases), by=list(date=suedtirol$date), FUN=sum)
suedtirol$region <- "Trentino-Alto Adige"
suedtirol$country <- "Italy"
suedtirol <- setnames(suedtirol, c("date", "cases", "region", "country"))
suedtirol <- suedtirol %>%
select(date, region, cases, country)
cases_combined <- rbind(unique(cases_combined), suedtirol) %>%
filter(region != "P.A. Bolzano") %>%
filter(region != "P.A. Trento") %>%
arrange(country, region, date)
cases_germany <- cases_combined %>% filter(country == "Germany")
cases_france <- cases_combined %>% filter(country == "France")
cases_italy <- cases_combined %>% filter(country == "Italy")
cases_switzerland <- cases_combined %>% filter(country == "Switzerland")
days <- seq(from=as.Date('2020-01-01'), to=as.Date("2020-07-28"),by='days')
for (i in seq_along(days)) {
for (x in unique(cases_combined$region)) {
if (length(cases_combined[cases_combined$region == x & cases_combined$date == days[i],]$country) < 1) {
cases_combined <- rbind(cases_combined, data.frame(date = days[i], region = x, cases = 0, country = cases_combined[cases_combined$region == x,]$country[1]))
}
}
}
write_csv(cases_combined, "data/Cases/combined_cases.csv")
View(cases_combined)
cases_combined<- read_csv("data/Cases/combined_cases.csv")
View(cases_combined)
View(cases_combined)
days <- seq(from=as.Date('2020-01-01'), to=as.Date("2020-07-28"),by='days')
for (i in seq_along(days)) {
for (x in unique(cases_combined$region)) {
if (length(cases_combined[cases_combined$region == x & cases_combined$date == days[i],]$country) < 1) {
cases_combined <- rbind(cases_combined, data.frame(date = days[i], region = x, cases = 0, country = cases_combined[cases_combined$region == x,]$country[1]))
}
}
}
View(cases_combined)
write_csv(cases_combined, "data/Cases/combined_cases.csv")
cases_combined<- read_csv("data/Cases/combined_cases.csv")
cases_combined <- cases_combined %>%
arrange(date, country, region)
cases_national <- cases_combined %>% dplyr::group_by(date, country) %>% dplyr::summarize(cases_national =sum(cases,na.rm = T))
View(cases_national)
cases_national <- cases_national %>%
arrange(date, country)
cases_combined <- left_join(cases_combined, cases_national,by=c("country","date"))
cases_combined <- cases_combined %>%
filter(date <= "2020-07-22")
write_csv(cases_combined, "data/Cases/combined_cases.csv")
View(cases_combined)
library(zoo)
coronanet <- readRDS("data/CoronaNet/coronanet_internal_sub_clean.RDS") %>%
filter(country %in% c("France", "Germany", "Italy", "Switzerland"))
cases_combined<- read_csv("data/Cases/combined_cases.csv")
View(cases_combined)
View(cases_combined)
gg1.1<- ggplot(cases_national %>% filter(region == "National") %>% select(date, country, region, cases, cases_national) %>% unique(), aes(x=date, y=cases, color=country)) + geom_line() + labs(x = "Date", y = "Cases", color="Country") + ggtitle("Cumulative COVID-19 Cases per Country") +theme_bw()
gg1.1<- ggplot(cases_national %>% %>% select(date, country, region, cases, cases_national) %>% unique(), aes(x=date, y=cases, color=country)) + geom_line() + labs(x = "Date", y = "Cases", color="Country") + ggtitle("Cumulative COVID-19 Cases per Country") +theme_bw()
gg1.1<- ggplot(cases_national %>% select(date, country, region, cases, cases_national) %>% unique(), aes(x=date, y=cases, color=country)) + geom_line() + labs(x = "Date", y = "Cases", color="Country") + ggtitle("Cumulative COVID-19 Cases per Country") +theme_bw()
gg1.1<- ggplot(cases_national, aes(x=date, y=cases, color=country)) + geom_line() + labs(x = "Date", y = "Cases", color="Country") + ggtitle("Cumulative COVID-19 Cases per Country") +theme_bw()
g1.1
gg1.1
gg1.1<- ggplot(cases_national, aes(x=date, y=cases_national, color=country)) + geom_line() + labs(x = "Date", y = "Cases", color="Country") + ggtitle("Cumulative COVID-19 Cases per Country") +theme_bw()
gg1.1
View(cases_combined)
merged_regional<- cases_combined
merged_regional <- merged_regional %>%
group_by(country, region) %>%
mutate(
new_cases = cases - lag(cases),
new_cases_national = cases_national - lag(cases_national)
)%>%
drop_na(region)
# compute columns as described in cases_concentration.R
df_euro <- read_csv("data/merged_final.csv", guess_max = 10000)%>% select(2,3,14,15)%>% unique()
df_main <- read_csv("data/merged_final.csv", guess_max = 10000)
merged_regional <- merged_regional %>%
select(date, country, region, cases, new_cases, new_cases_national) %>%
unique() %>%
group_by(country, region) %>%
mutate(rolling_average = rollapply(cases, 7, mean, fill=NA)) %>%
mutate(past_average = rollapply(cases, 7, mean, align="right", fill=NA)) %>%
mutate(rolling_average_new_cases = rollapply(new_cases, 7, mean, fill=NA)) %>%
mutate(past_average_new_cases = rollapply(new_cases, 7, mean, align="right", fill=NA)) %>%
mutate(past_average_new_cases_national = rollapply(new_cases_national, 7, mean, align="right", fill=NA)) %>%
left_join(df_euro, by=c("region"="region","country"="country"))
View(merged_regional)
View(df_main)
View(df_main)
merged_regional$eurostat_total_population_2019 <- sapply(1:nrow(merged_national), function(i) {if (merged_national$country[i] == "Germany") {83019213} else if (merged_national$country[i] == "France") {67012883} else if (merged_national$country[i] == "Italy") {59287270} else {8544527}})
merged_regional$eurostat_total_population_2019 <- sapply(1:nrow(merged_regional), function(i) {if (merged_regional$country[i] == "Germany") {83019213} else if (merged_regional$country[i] == "France") {67012883} else if (merged_regional$country[i] == "Italy") {59287270} else {8544527}})
merged_regional$sum_pop <- sapply(1:nrow(merged_regional), function(i) {if (merged_regional$country[i] == "Germany") {83019213} else if (merged_regional$country[i] == "France") {67012883} else if (merged_regional$country[i] == "Italy") {59287270} else {8544527}})
eurostat_regional <- read_csv("data/eurostat_data_v2.csv") %>%
select(-eurostat_total_population_2019)
eurostat_regional <- read_csv("data/eurostat_data.csv") %>%
select(-eurostat_total_population_2019)
combined_cases <- read_csv("data/merged_final.csv") %>% select("date","region","cases","cases_national","country","eurostat_total_population_2019","code")
View(cases_combined)
View(combined_cases)
df_main <- read_csv("data/merged_final.csv")
cases_combined<- read_csv("data/Cases/combined_cases.csv")
View(cases_combined)
names(df_main)
df_main <- read_csv("data/merged_final.csv")
View(df_main)
cases_combined<- read_csv("data/Cases/combined_cases.csv")
View(cases_combined)
